From c3fdb3735497b38560c3b3bce893526b91b42411 Mon Sep 17 00:00:00 2001
From: Xiao He <xiao.he@intel.com>
Date: Mon, 12 Oct 2020 17:41:34 +0800
Subject: [PATCH] SDE/FPR: recovery: Add wipe data notification

add secure data erase notify function in recovery.

Tracked-On: OAM-92884
Signed-off-by: Xiao He <xiao.he@intel.com>
---
 install/wipe_data.cpp | 53 ++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 52 insertions(+), 1 deletion(-)

diff --git a/install/wipe_data.cpp b/install/wipe_data.cpp
index 765a8152..f571b029 100644
--- a/install/wipe_data.cpp
+++ b/install/wipe_data.cpp
@@ -19,6 +19,8 @@
 #include <stdio.h>
 #include <string.h>
 #include <sys/stat.h>
+#include <sys/socket.h>
+#include <linux/vm_sockets.h>

 #include <functional>
 #include <vector>
@@ -36,6 +38,46 @@ constexpr const char* CACHE_ROOT = "/cache";
 constexpr const char* DATA_ROOT = "/data";
 constexpr const char* METADATA_ROOT = "/metadata";

+#define HOST_VSOCK_PORT 2345
+#define CMD_SEC_ERASE_START  "SEC_ERASE:START"
+#define CMD_SEC_ERASE_DONE "SEC_ERASE:DONE"
+
+int notify_host(void) {
+  int fd;
+  char msgbuf[64] = {0};
+  struct sockaddr_vm sa = {
+    .svm_family = AF_VSOCK,
+    .svm_cid = VMADDR_CID_HOST,
+    .svm_port = HOST_VSOCK_PORT,
+  };
+  fd = socket(AF_VSOCK, SOCK_STREAM, 0);
+  if(fd < 0)
+    return -(2000 + errno);
+
+  if(connect(fd, (struct sockaddr*)&sa, sizeof(sa)) != 0) {
+    close(fd);
+    return -(3000 + errno);
+  }
+  int ret = send(fd, CMD_SEC_ERASE_START, strlen(CMD_SEC_ERASE_START), 0);
+  if(ret <= 0) {
+    close(fd);
+    return -(4000+errno);
+  }
+  bzero(msgbuf, sizeof(msgbuf));
+  if((ret = recv(fd, msgbuf, sizeof(msgbuf), 0)) <= 0) {
+    close(fd);
+    return -(5000 + errno);
+  }
+  else {
+    msgbuf[strlen(CMD_SEC_ERASE_DONE)+1]='\0';
+    if(strncmp(msgbuf, CMD_SEC_ERASE_DONE, strlen(CMD_SEC_ERASE_DONE)) != 0) {
+      ret = -1;
+    }
+  }
+  close(fd);
+  return ret;
+}
+
 static bool EraseVolume(const char* volume, RecoveryUI* ui, bool convert_fbe) {
   bool is_cache = (strcmp(volume, CACHE_ROOT) == 0);
   bool is_data = (strcmp(volume, DATA_ROOT) == 0);
@@ -55,6 +97,15 @@ static bool EraseVolume(const char* volume, RecoveryUI* ui, bool convert_fbe) {
   ensure_path_unmounted(volume);

   int result;
+  if(is_data) {
+    int ret = notify_host();
+    if(ret > 0){
+      ui->Print("Secure Erase Success\n");
+    }
+    else {
+      ui->Print("Secure Erase failed, format %s directly\n", volume);
+    }
+  }
   if (is_data && convert_fbe) {
     constexpr const char* CONVERT_FBE_DIR = "/tmp/convert_fbe";
     constexpr const char* CONVERT_FBE_FILE = "/tmp/convert_fbe/convert_fbe";
@@ -120,4 +171,4 @@ bool WipeData(Device* device, bool convert_fbe) {
   }
   ui->Print("Data wipe %s.\n", success ? "complete" : "failed");
   return success;
-}
\ No newline at end of file
+}
--
2.17.1

